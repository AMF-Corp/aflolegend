{% extends 'base.html.twig' %}
{# view carte #}
{% block title %}Liste de Cartes
{% endblock %}

{% block body %}
	<style>
		body {
			font-family: Arial, sans-serif;
		}

		.container {
			display: flex;
			flex-direction: column;
			align-items: center;
			margin-top: 20px;
		}

		.cards {
			display: flex;
			flex-wrap: wrap;
			justify-content: center;
			width: 80%;
			margin-bottom: 20px;
		}

		.card {
			cursor: pointer;
			flex: 0 1 calc(20% - 20px);
			margin: 10px;
			display: flex;
			flex-direction: column;
			align-items: center;
			background-color: #f9f9f9;
			border: 1px solid #ddd;
			border-radius: 8px;
			box-shadow: 2px 2px 6px #ccc;
			padding: 10px;
			transition: transform 0.2s, box-shadow 0.2s;
		}

		.card:hover {
			transform: translateY(-5px);
			box-shadow: 4px 4px 12px #bbb;
		}

		.card img {
			width: 100%;
			height: auto;
			border-radius: 5px;
		}

		.card h2 {
			font-size: 16px;
			color: #333;
		}

		.pagination {
			position: sticky;
			top: 10px;
			width: 80%;
			display: flex;
			justify-content: space-between;
			padding: 10px 0;
			background: white;
			border-radius: 5px;
			box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
			z-index: 100;
		}

		.pagination button {
			padding: 10px 15px;
			border-radius: 5px;
			border: none;
			background-color: #007bff;
			color: white;
			cursor: pointer;
		}

		.pagination button:hover {
			background-color: #0056b3;
		}

		.deck-container {
			width: 80%;
			padding: 10px;
			border: 2px dashed #666;
			border-radius: 10px;
			text-align: center;
			margin-top: 20px;
		}

		.deck {
			display: flex;
			flex-wrap: wrap;
			justify-content: start;
			align-items: flex-start;
			margin-top: 10px;
		}

		.deck .card {
			cursor: default;
			margin: 5px;
			transition: none;
		}

		.deck .card:hover {
			transform: none;
			box-shadow: 2px 2px 6px #ccc;
		}

		#saveDeckButton {
			background-color: #28a745;
			color: white;
			border: none;
			border-radius: 5px;
			padding: 10px 20px;
			cursor: pointer;
			transition: background-color 0.3s;
		}

		#saveDeckButton:hover {
			background-color: #218838;
		}
	</style>


	<div class="container">
		<div class="pagination">
			<button onclick="window.location.href='{{ path('app_carte_view', {'page': prevPage}) }}'">Prev</button>
			<button id="randomDeckButton" onclick="selectRandomCards()">Random 40</button>
			<button onclick="window.location.href='{{ path('app_carte_view', {'page': nextPage}) }}'">Next</button>
		</div>
		<div class="cards">
			{% for carte in cartes %}
				<div class="card" onclick="addToDeck('{{ carte | json_encode | e('js') }}', this)">
					<img src="{{ carte.image }}" alt="Carte de {{ carte.name }}">
					<h2>{{ carte.name }}</h2>
					<p>{{ carte.category }}
						| HP:
						{{ carte.hp }}</p>
				</div>
			{% endfor %}
		</div>
		<div class="deck-container">
			<div class="deck-heading">Your Deck (0/40)</div>
			<div class="deck" id="deck"></div>
			<button id="startOverButton" onclick="startOver()">Reset Deck
			</button>
			<button id="saveDeckButton" onclick="saveDeck()">Save Deck</button>
		</div>
	</div>

	<script>
		const deckLimit = 40;
const deckContainer = document.getElementById('deck');
const deckCounter = deckContainer.querySelector('.deck-heading');


let deck = JSON.parse(localStorage.getItem('deck')) || [];


function addToDeck(cardData, element) {
let card = JSON.parse(cardData);
if (deck.length<deckLimit && !deck.some(e => e.id === card.id) ) {
deck.push(card);
localStorage.setItem('deck', JSON.stringify(deck));
const cardElement = element.cloneNode(true);
cardElement.onclick = function () {
removeFromDeck(card.id, this);
};
deckContainer.appendChild(cardElement);
updateDeckCount();
} else {
alert("Deck is full or card is already added.");
}
}

// enlever carte du deck
function removeFromDeck(cardId, element) {
deck = deck.filter(card => card.id !== cardId);
localStorage.setItem('deck', JSON.stringify(deck));
element.parentNode.removeChild(element);
updateDeckCount();
}

function selectRandomCards() {
// Esta função deve buscar 40 cartas aleatórias da coleção disponível
// Esta lógica depende de como as cartas estão disponíveis em seu sistema
alert('This will select 40 random cards');
}

// vider selection du deck
function startOver() {
deck = [];
localStorage.setItem('deck', JSON.stringify(deck));
while (deckContainer.firstChild) {
deckContainer.removeChild(deckContainer.firstChild);
}
updateDeckCount();
}


// refresh count cartes du  deck
function updateDeckCount() {
var deckSize = deck.length;
var deckHeading = document.querySelector('.deck-heading');
deckHeading.textContent = 'Your Deck (' + deckSize + '/40)';
}

// Charger cartes du deck a l'ouverture de la page
window.onload = function () {
deck.forEach(card => {
const cardElement = document.createElement('div');
cardElement.className = 'card';
cardElement.innerHTML = `
                <img src="${
card.image
}" alt="Image of ${
card.name
}" style="width: 100%; height: 150px; object-fit: cover; border-radius: 10px;">
                <h2>${
card.name
}</h2>
                <p>Category: ${
card.category
}</p>
                <p>HP: ${
card.hp
}</p>
                <p>${
card.description
}</p>
            `;
cardElement.onclick = function () {
removeFromDeck(card.id, this);
};
deckContainer.appendChild(cardElement);
});
updateDeckCount();
};

document.getElementById('saveDeckButton').addEventListener('click', function () {
if (deck.length === deckLimit) {
const deckData = {
cartes: deck.map(card => card.id) // assegura que estamos enviando apenas os IDs das cartas
};

console.log(deckData);

fetch('/deck/save', {
method: 'POST',
headers: {
'Content-Type': 'application/json'
},
body: JSON.stringify(deckData) // envia os dados do baralho
}).then(response => {
if (!response.ok) {
throw new Error('Network response was not ok');
}
return response.json();
}).then(data => {
if (data.success) {
alert('Deck saved successfully!');
// Optional: redirect or update UI
// Exemplo: window.location.href = '/deck/success';
} else {
alert('Failed to save deck. ' + data.message);
}
}).catch(error => {
console.error('Error:', error);
alert('Error saving deck: ' + error.message);
});
} else {
alert('You must have 40 cards in the deck to save.');
}
});
	</script>
{% endblock %}
